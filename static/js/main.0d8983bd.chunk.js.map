{"version":3,"sources":["row.js","request.js","banner.js","logo-net.png","user.png","nav.js","App.js","reportWebVitals.js","index.js"],"names":["Row","title","fetchUrl","orignal","useState","movies","setMovie","trailerUrl","settrailerUrl","useEffect","a","fetch","then","response","json","request","results","fetchData","className","map","movie","onClick","movieTrailer","name","url","urlParams","URLSearchParams","URL","search","get","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","apiKey","trending","netflixOriginals","topRated","actionMovies","comedyMovies","horrorMovies","romanceMovies","documentries","Banner","Math","floor","random","length","style","backgroundImage","overview","Nav","show","setShow","window","addEventListener","scrollY","removeEventListener","logo","user","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0d8983bd.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./row.css\";\r\nimport Youtube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nfunction Row({ title, fetchUrl, orignal }) {\r\n  const [movies, setMovie] = useState([]);\r\n  const [trailerUrl, settrailerUrl] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      fetch(`https://api.themoviedb.org/3/${fetchUrl}`)\r\n        .then((response) => response.json())\r\n        .then((request) => setMovie(request.results));\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n  const baseURL = \"https://image.tmdb.org/t/p/original/\";\r\n\r\n  const opts = {\r\n    height: \"390\",\r\n    width: \"100%\",\r\n    playerVars: {\r\n      // https://developers.google.com/youtube/player_parameters\r\n      autoplay: 1,\r\n    },\r\n  };\r\n\r\n  const handleClick = (movie) => {\r\n    if (trailerUrl) {\r\n      settrailerUrl(\"\");\r\n    } else {\r\n      movieTrailer(movie?.name || movie?.title || \"\")\r\n        .then((url) => {\r\n          const urlParams = new URLSearchParams(new URL(url).search);\r\n          settrailerUrl(urlParams.get(\"v\"));\r\n        })\r\n        .catch((error) => console.log(error));\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"row\">\r\n      <h1 className=\"row__title\">{title}</h1>\r\n      <div className=\"row__poster-div\">\r\n        {movies.map((movie) => {\r\n          return (\r\n            <img\r\n              onClick={() => handleClick(movie)}\r\n              key={movie.id}\r\n              className={`row__poster ${orignal && \"row__bigger\"}`}\r\n              src={`${baseURL}${\r\n                orignal ? movie.poster_path : movie.backdrop_path\r\n              }`}\r\n              alt={movie.name || \"\"}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n      {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","const apiKey = \"b24031e146455369bfa5e1f1c8cdee73\";\r\n\r\nconst request = {\r\n  trending: `trending/all/week?api_key=${apiKey}&language=en-US`,\r\n  netflixOriginals: `discover/tv?api_key=${apiKey}&with_networks=213`,\r\n  topRated: `movie/top_rated?api_key=${apiKey}&language=en-US`,\r\n  actionMovies: `discover/movie?api_key=${apiKey}&with_genres=28`,\r\n  comedyMovies: `discover/movie?api_key=${apiKey}&with_genres=35`,\r\n  horrorMovies: `discover/movie?api_key=${apiKey}&with_genres=27`,\r\n  romanceMovies: `discover/movie?api_key=${apiKey}&with_genres=10749`,\r\n  documentries: `discover/movie?api_key=b24031e146455369bfa5e1f1c8cdee73&with_genres=99`,\r\n};\r\n\r\nexport default request;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./banner.css\";\r\n\r\nfunction Banner() {\r\n  const baseURL = \"https://image.tmdb.org/t/p/original/\";\r\n\r\n  const [movies, setMovie] = useState([]);\r\n\r\n  useEffect(() => {\r\n    function fetchData() {\r\n      fetch(\r\n        `https://api.themoviedb.org/3/discover/tv?api_key=b24031e146455369bfa5e1f1c8cdee73&with_networks=213`\r\n      )\r\n        .then((response) => response.json())\r\n        .then((request) => {\r\n          setMovie(\r\n            request.results[Math.floor(Math.random() * request.results.length)]\r\n          );\r\n        });\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"banner__wrapper\">\r\n      <div\r\n        style={{\r\n          backgroundImage: `url(\"${baseURL}${movies.backdrop_path}\")`,\r\n        }}\r\n        className=\"banner\"\r\n      >\r\n        <div className=\"banner__contents\">\r\n          <h1 className=\"banner__h1\">{movies.name || movies.title || \"\"}</h1>\r\n          <div className=\"btn__div\">\r\n            <button className=\"btn\">Play</button>\r\n            <button className=\"btn\">My List</button>\r\n          </div>\r\n          <p className=\"banner__p\">{movies.overview}</p>\r\n        </div>\r\n      </div>\r\n      <div className=\"banner__fade\"></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n","export default __webpack_public_path__ + \"static/media/logo-net.774e8c16.png\";","export default __webpack_public_path__ + \"static/media/user.73a0bc1f.png\";","import React, { useEffect, useState } from \"react\";\r\nimport \"./nav.css\";\r\nimport logo from \"./logo-net.png\";\r\nimport user from \"./user.png\";\r\n\r\nfunction Nav() {\r\n  const [show, setShow] = useState(false);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", () => {\r\n      if (window.scrollY > 100) {\r\n        setShow(true);\r\n      } else {\r\n        setShow(false);\r\n      }\r\n    });\r\n    return () => {\r\n      window.removeEventListener(\"scroll\");\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <nav className={`nav ${show && \"black\"}`}>\r\n      <img className=\"netflix-logo images\" src={logo} alt=\"\" />\r\n      <img className=\"user images\" src={user} alt=\"\" />\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import \"./App.css\";\nimport React, { useEffect } from \"react\";\nimport Row from \"./row.js\";\nimport request from \"./request\";\nimport Banner from \"./banner.js\";\nimport Nav from \"./nav.js\";\nfunction App() {\n  useEffect(() => {});\n  return (\n    <div className=\"App\">\n      <Nav />\n      <Banner />\n      <Row\n        title=\"NETFLIX ORIGINALS\"\n        fetchUrl={request.netflixOriginals}\n        orignal={true}\n      />\n      <Row title=\"Trending Now\" fetchUrl={request.trending} />\n      <Row title=\"Top Rated\" fetchUrl={request.topRated} />\n      <Row title=\"Action Movies\" fetchUrl={request.actionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={request.comedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={request.horrorMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={request.romanceMovies} />\n      <Row title=\"Documentries\" fetchUrl={request.documentries} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}